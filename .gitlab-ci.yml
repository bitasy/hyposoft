variables:
  DB_HOST: database-1.clf9gopmww58.us-east-1.rds.amazonaws.com
  DB_USER: postgres
  DB_PASS: hyposoft
  DB_NAME: dev


# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
#cache:
#  paths:
#  - ~/.cache/pip3/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
- /usr/bin/python3 -V  # Print out python version for debugging
# Uncomment next line if your Django app needs a JS runtime:
# - apt-get update -q && apt-get install nodejs -yqq
- /usr/bin/pip3 install -r requirements.txt

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

stages:
- test
- staging
- deploy

django_test:
  stage: test
  script:
  - python3 app/hyposoft/manage.py test
  except:
  - master
  tags:
  - dev

stage_dev:
  stage: staging
  script:
  - cd /home/gitlab-runner/
  - git clone git@gitlab.oit.duke.edu:ban20/hyposoft-group-8.git "$CI_COMMIT_SHORT_SHA-staging"
  - cd "$CI_COMMIT_SHORT_SHA-staging"
  - git checkout dev
  - cd app/hyposoft
  - python3 manage.py collectstatic --no-input
  only:
  - dev
  tags:
  - dev

deploy_dev:
  stage: deploy
  script:
  - mv -f /home/gitlab-runner/"$CI_COMMIT_SHORT_SHA-staging" /home/gitlab-runner/hyposoft-deployed
  - python3 /home/gitlab-runner/hyposoft-deployed/app/hyposoft/manage.py migrate
  - sudo uwsgi --reload /home/gitlab-runner/uwsgi.pid
  only:
  - dev
  tags:
  - dev
